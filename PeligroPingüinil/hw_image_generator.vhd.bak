--------------------------------------------------------------------------------
--
--   FileName:         hw_image_generator.vhd
--   Dependencies:     none
--   Design Software:  Quartus II 64-bit Version 12.1 Build 177 SJ Full Version
--
--   HDL CODE IS PROVIDED "AS IS."  DIGI-KEY EXPRESSLY DISCLAIMS ANY
--   WARRANTY OF ANY KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING BUT NOT
--   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
--   PARTICULAR PURPOSE, OR NON-INFRINGEMENT. IN NO EVENT SHALL DIGI-KEY
--   BE LIABLE FOR ANY INCIDENTAL, SPECIAL, INDIRECT OR CONSEQUENTIAL
--   DAMAGES, LOST PROFITS OR LOST DATA, HARM TO YOUR EQUIPMENT, COST OF
--   PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR SERVICES, ANY CLAIMS
--   BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF),
--   ANY CLAIMS FOR INDEMNITY OR CONTRIBUTION, OR OTHER SIMILAR COSTS.
--
--   Version History
--   Version 1.0 05/10/2013 Scott Larson
--     Initial Public Release
--    
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY hw_image_generator IS
  GENERIC(
    pixels_y :  INTEGER := 640;   --row that first color will persist until
    pixels_x :  INTEGER := 480);  --column that first color will persist until
  PORT(
    disp_ena :  IN   STD_LOGIC;  --display enable ('1' = display time, '0' = blanking time)
    row      :  IN   INTEGER;    --row pixel coordinate
    column   :  IN   INTEGER;    --column pixel coordinate
    red      :  OUT  STD_LOGIC_VECTOR(2 DOWNTO 0) := (OTHERS => '0');  --red magnitude output to DAC
    green    :  OUT  STD_LOGIC_VECTOR(2 DOWNTO 0) := (OTHERS => '0');  --green magnitude output to DAC
    blue     :  OUT  STD_LOGIC_VECTOR(2 DOWNTO 0) := (OTHERS => '0'); --blue magnitude output to DAC
	 dipsw	 :  IN	STD_LOGIC_VECTOR(1 DOWNTO 0);
	 reloj	 :	 IN   STD_LOGIC);
END hw_image_generator;

ARCHITECTURE behavior OF hw_image_generator IS
SIGNAL x,y : INTEGER RANGE 0 TO 600;
BEGIN

PROCESS(disp_ena, row, column)
BEGIN
IF (disp_ena = '1') THEN
	IF ((row > x and row < x+30) and (column > y and column < y+30)) THEN
		red <= (OTHERS => '1');
	ELSIF ((row > (x+20) and row < (x+40)) and (column > (y-5) and column < (y+20))) THEN
		red <= (OTHERS => '1');
	ELSE
		red <= (OTHERS => '0'); --FONDO
		green <= (OTHERS => '1');
		blue <= (OTHERS => '1');
	END IF;
END IF;
END PROCESS;
	
PROCESS (reloj, dipsw)
BEGIN
	IF (reloj'event AND reloj = '1') THEN
		IF (dipsw(1)='1' AND dipsw(0)='1') THEN --AVANZA
			IF (x>0 AND x<480) THEN
				x<=x-1;
				y<=y;
			ELSE
				x<=1;
			END IF;
		ELSIF (dipsw(1)='0' AND dipsw(0)='0') THEN --DETENER
			IF (y>0 AND y<640) THEN
				x<=x;
				y<=y+1;
			ELSE
				y<=1;
			END IF;
		ELSIF (dipsw(1)='0' AND dipsw(0)='1') THEN --GIRAR IZQ
			IF (y>0 AND y<640) THEN
				x<=x;
				y<=y-1;
			ELSE
				y<=1;
			END IF;
		ELSIF (dipsw(1)='1' AND dipsw(0)='0') THEN --GIRAR DER
			IF (x>0 AND x<480) THEN
				x<=x+1;
				y<=y;
			ELSE
				x<=1;
			END IF;
		END IF;
	END IF;
	END PROCESS;	
END behavior;